{
  "version": 3,
  "sources": ["classes/AddHtmlElements.ts", "classes/Box.ts", "classes/DiceSingleton.ts", "classes/Player.ts", "classes/effects/buff/AdvanceStrategy.ts", "classes/effects/buff/ExtraRollStrategy.ts", "classes/effects/debuff/BackStrategy.ts", "classes/effects/debuff/LoseTurnStrategy.ts", "classes/effects/item/BubbleItemStrategy.ts", "classes/effects/item/HookItemStrategy.ts", "classes/effects/item/ShieldItemStrategy.ts", "classes/Events.ts", "classes/BoardGameSingleton.ts", "classes/Draw.ts", "index.ts"],
  "sourcesContent": ["export abstract class AddHtmlElements {\n    public static spanToMatchInfo(text: string): void{\n        const matchInfoElement: Element = <Element>document.querySelector(\".match-info\");\n        const spanElement = document.createElement(\"span\");\n        spanElement.innerHTML = text;\n        matchInfoElement.appendChild(spanElement);\n    }\n}", "export class Box {\n    private effect: string;\n\n    constructor(effect = \"empty\") {\n        this.effect = effect;\n    }\n\n    public getEffect(): string {\n        return this.effect;\n    }\n}", "import {IDice} from \"../interfaces/IDice\";\n\nexport class DiceSingleton implements IDice {\n    private static instance: DiceSingleton;\n    private faces: number;\n\n    private constructor(){\n        this.faces = 12;\n    }\n\n    public static getInstance(): DiceSingleton {\n        if(this.instance == null)\n            this.instance = new DiceSingleton();\n        return this.instance;\n    }\n\n    public getNumber(): number {\n        const randomNumber: number = Math.floor(Math.random()*this.faces+1);\n        return randomNumber;\n    }\n}", "import { IEffect } from \"../interfaces/IEffect\";\nimport { AddHtmlElements } from \"./AddHtmlElements\";\nimport { DiceSingleton } from \"./DiceSingleton\";\n\nexport class Player {\n    private id: string;\n    private name: string;\n    private currentPosition: number;\n    private isBuffed: boolean;\n    private isDebuffed: boolean;\n    private items:Map<string, IEffect>;\n\n    constructor(name: string, id: number){\n        this.id = `p${id}`;\n        this.name = name;\n        this.currentPosition = 0;\n        this.isBuffed = false;\n        this.isDebuffed = false;\n        this.items = new Map<string, IEffect>();\n    }\n\n    public pullDice (dice: DiceSingleton): number{\n        AddHtmlElements.spanToMatchInfo(`El jugador ${this.name} lanza sus dados...`);\n        const result: number = dice.getNumber();\n        AddHtmlElements.spanToMatchInfo(`Obtuviste un ${result}`);\n        return result;\n    }\n\n    public move(number: number): void{\n        this.currentPosition = number;\n        AddHtmlElements.spanToMatchInfo(`la posicion ahora es ${number}`);\n    }\n\n    public addItem(name: string, effect: IEffect): void {\n        this.items.set(name, effect);\n    }\n\n    public getItem(name: string): IEffect | undefined {\n        return this.items.get(name);\n    }\n\n    public getAllItems(): Map<string, IEffect> {\n        return this.items;\n    }\n\n    public getAllItemsName(): string {\n        const IterableKeys = this.items.keys();\n        let itemsName = \"\";\n        for(let itemName of IterableKeys){\n            itemsName += `${itemName}, `\n        }\n\n        return itemsName;\n    }\n\n    public removeItem(name: string): void {\n        this.items.delete(name);\n    }\n\n    public updateBuff(buffed: boolean): void {\n        this.isBuffed = buffed;\n    }\n\n    public updateDebuff(debuffed: boolean): void {\n        this.isDebuffed = debuffed;\n    }\n\n    //GETTERS\n    public getId(): string {\n        return this.id;\n    }\n\n    public getName(): string{\n        return this.name;\n    }\n\n    public getCurrentPostion(): number {\n        return this.currentPosition;\n    }\n\n    public getIsBuffed(): boolean {\n        return this.isBuffed;\n    }\n\n    public getIsdebuffed(): boolean {\n        return this.isDebuffed;\n    }\n\n    public toString(): string {\n        return `Nombre: ${this.name} | posicion: ${this.currentPosition}`;\n    }\n}\n", "import { IEffect } from \"../../../interfaces/IEffect\";\nimport { AddHtmlElements } from \"../../AddHtmlElements\";\nimport { Player } from \"../../Player\";\n\nexport class AdvanceStrategy implements IEffect {\n    public activeEffect(player: Player): void {\n        const playerName: string = player.getName();\n        AddHtmlElements.spanToMatchInfo(`${playerName} avanza 3 casilleros mas`);\n        const result: number = player.getCurrentPostion() + 3;\n        player.move(result);\n        AddHtmlElements.spanToMatchInfo(`La posicion de ${playerName} ahora es: ${result}`);\n    }\n}", "import { IEffect } from \"../../../interfaces/IEffect\";\nimport { AddHtmlElements } from \"../../AddHtmlElements\";\nimport { DiceSingleton } from \"../../DiceSingleton\"\nimport { Player } from \"../../Player\";\n\nexport class ExtraRollStrategy implements IEffect{\n    private dice: DiceSingleton;\n\n    constructor(){\n        this.dice = DiceSingleton.getInstance();\n    }\n\n    public activeEffect(player: Player): void {\n        AddHtmlElements.spanToMatchInfo(`${player.getName()} puede lanzar nuevamente su dado`);\n        const result: number = player.pullDice(this.dice);\n        player.move(player.getCurrentPostion() + result);\n    }\n}", "import { IEffect } from \"../../../interfaces/IEffect\";\nimport { AddHtmlElements } from \"../../AddHtmlElements\";\nimport { Player } from \"../../Player\";\n\nexport class BackStrategy implements IEffect{\n\n    public activeEffect(player: Player): void {\n        const playerName: string = player.getName();\n        AddHtmlElements.spanToMatchInfo(`${playerName} retrocede 3 casilleros`);\n        const result: number = player.getCurrentPostion() - 3;\n        player.move(result);\n        AddHtmlElements.spanToMatchInfo(`La posicion de ${playerName} ahora es: ${result}`);\n    }\n}", "import { IEffect } from \"../../../interfaces/IEffect\";\nimport { AddHtmlElements } from \"../../AddHtmlElements\";\nimport { Player } from \"../../Player\";\n\nexport class LoseTurnStrategy implements IEffect{\n\n    public activeEffect(player: Player): void {\n        AddHtmlElements.spanToMatchInfo(`${player.getName()} pierde su siguente turno`);\n        player.updateDebuff(true);\n    }\n}", "import { IEffect } from \"../../../interfaces/IEffect\";\nimport { IItem } from \"../../../interfaces/IItem\"\nimport { AddHtmlElements } from \"../../AddHtmlElements\";\nimport { Player } from \"../../Player\";\n\nexport class BubbleItemStrategy implements IEffect, IItem {\n\n    public activeEffect(player: Player): void {\n        player.addItem(\"bubble\", new BubbleItemStrategy());\n        AddHtmlElements.spanToMatchInfo(`Item \"Bubble\" a\u00F1adido a ${player.getName()}`);\n    }\n\n    public use(player: Player): void {\n        player.updateDebuff(true);\n        AddHtmlElements.spanToMatchInfo(`El jugador uso \"Bubble\" contra ${player.getName()} y perdera su siguiente turno`);\n    }\n}", "import { IEffect } from \"../../../interfaces/IEffect\";\nimport { IItem } from \"../../../interfaces/IItem\";\nimport { AddHtmlElements } from \"../../AddHtmlElements\";\nimport { Player } from \"../../Player\";\n\nexport class HookItemStrategy implements IEffect, IItem {\n\n    public activeEffect(player: Player): void {\n        player.addItem(\"hook\", new HookItemStrategy());\n        AddHtmlElements.spanToMatchInfo(`Item \"Hook\" a\u00F1adido a ${player.getName()}`);\n    }\n\n    public use(player: Player): void {\n        const enemyPosition: number = player.getCurrentPostion();\n        player.move(enemyPosition - 7);\n        AddHtmlElements.spanToMatchInfo(`El jugador uso el \"Hook\" contra ${player.getName()} y lo hizo retroceder 7 casilleros`);\n    }\n}", "import { IEffect } from \"../../../interfaces/IEffect\";\nimport { IItem } from \"../../../interfaces/IItem\";\nimport { AddHtmlElements } from \"../../AddHtmlElements\";\nimport { Player } from \"../../Player\";\n\nexport class ShieldItemStrategy implements IEffect, IItem {\n    \n    public activeEffect(player: Player): void {\n        player.addItem(\"shield\", new ShieldItemStrategy);\n        AddHtmlElements.spanToMatchInfo(`Item \"Shield\" a\u00F1adido a ${player.getName()}`);\n    }\n\n    public use(player: Player): void {\n        player.updateBuff(true);\n        AddHtmlElements.spanToMatchInfo(`El jugador uso el \"Shield\" en ${player.getName()}`);\n    }\n}", "import { IEffect } from \"../interfaces/IEffect\";\nimport { AddHtmlElements } from \"./AddHtmlElements\";\nimport { Box } from \"./Box\";\nimport { AdvanceStrategy } from \"./effects/buff/AdvanceStrategy\";\nimport { ExtraRollStrategy } from \"./effects/buff/ExtraRollStrategy\";\nimport { BackStrategy } from \"./effects/debuff/BackStrategy\";\nimport { LoseTurnStrategy } from \"./effects/debuff/LoseTurnStrategy\";\nimport { BubbleItemStrategy } from \"./effects/item/BubbleItemStrategy\";\nimport { HookItemStrategy } from \"./effects/item/HookItemStrategy\";\nimport { ShieldItemStrategy } from \"./effects/item/ShieldItemStrategy\";\nimport { Player } from \"./Player\";\n\nexport abstract class Events {\n\n    //FUNCION PARA GENERAR UN NUMERO RANDOM DEPENDIENDO DE LA CANTIDAD DE EFECTOS\n    private static generateRandomNumberForEffects (effectType: string): number{\n        const effectsMap: Map<string, number> = new Map<string, number>();\n        effectsMap.set(\"buff\", 2);\n        effectsMap.set(\"debuff\", 2);\n        effectsMap.set(\"predict\", 1);\n        effectsMap.set(\"item\", 3);\n\n        const getAmountFromEffect = effectsMap.get(effectType) || -1;\n        const randomNumber: number = Math.floor(Math.random()*getAmountFromEffect+1);\n        return randomNumber;\n    }\n\n    public static applyEffect(currentPlayer: Player, boxes: Map<number, Box>): IEffect | undefined{\n        const playerPosition: number = currentPlayer.getCurrentPostion();\n        const actualBox: Box = <Box> boxes.get(playerPosition);\n        const boxEffect: string = actualBox.getEffect();\n\n        let result: number;\n\n        if(boxEffect == \"buff\"){\n            result = this.generateRandomNumberForEffects(\"buff\");\n            if(result == 1)\n                return new AdvanceStrategy();\n            if(result == 2)\n                return new ExtraRollStrategy();\n        }\n\n        if(boxEffect == \"debuff\"){\n            result = this.generateRandomNumberForEffects(\"debuff\");\n            if(result == 1)\n                return new BackStrategy();\n            if(result == 2)\n                return new LoseTurnStrategy();\n        }\n\n        if(boxEffect == \"item\"){\n            result = this.generateRandomNumberForEffects(\"item\");\n            if(result == 1)\n                return new HookItemStrategy();\n            if(result == 2)\n                return new BubbleItemStrategy();\n            if(result == 3)\n                return new ShieldItemStrategy();\n        }\n\n        return undefined;\n    }\n\n    //Si el jugador posee items se le pregunta si quiere usarlos y contra que enemigo quiere usarlo\n    public static itemUsed(currentPlayer: Player, enemyPlayer: Player, itemChosen: string): boolean{\n        const currentPlayerItems: Map<string, IEffect> = currentPlayer.getAllItems();\n\n        if(!currentPlayerItems.has(itemChosen))\n            return false;\n\n        const enemyPlayerName = enemyPlayer.getName();\n\n        AddHtmlElements.spanToMatchInfo(`has usado el objeto ${itemChosen}`);\n\n        if(itemChosen == \"bubble\"){\n            const bubble: BubbleItemStrategy = <BubbleItemStrategy> currentPlayerItems.get(\"bubble\");\n            \n            if(enemyPlayer.getIsBuffed()){\n                AddHtmlElements.spanToMatchInfo(`El ${enemyPlayerName} tenia un escudo y no se aplico el efecto`);\n                currentPlayer.removeItem(\"bubble\");\n                enemyPlayer.updateBuff(false);\n                return true;\n            }\n\n            bubble.use(enemyPlayer);\n            currentPlayer.removeItem(\"bubble\");  \n            return true;              \n        }\n\n        if(itemChosen == \"hook\"){\n            const hook: HookItemStrategy = <HookItemStrategy> currentPlayerItems.get(\"hook\");\n            \n            if(enemyPlayer.getIsBuffed()){\n                AddHtmlElements.spanToMatchInfo(`El ${enemyPlayerName} tenia un escudo y no se aplico el efecto`);\n                currentPlayer.removeItem(\"hook\");\n                enemyPlayer.updateBuff(false);\n                return true;\n            }\n\n            hook.use(enemyPlayer);\n            currentPlayer.removeItem(\"hook\"); \n            return true;               \n        }\n\n        if(itemChosen == \"shield\"){\n            const shield: ShieldItemStrategy = <ShieldItemStrategy> currentPlayerItems.get(\"shield\");\n            \n            if(enemyPlayer.getIsBuffed()){\n                AddHtmlElements.spanToMatchInfo(`El ${enemyPlayerName} tenia un escudo y no se aplico el efecto`);\n                currentPlayer.removeItem(\"shield\");\n                enemyPlayer.updateBuff(false);\n                return true;\n            }\n\n            shield.use(enemyPlayer);\n            currentPlayer.removeItem(\"shield\");\n            return true;           \n        }\n\n        return false;\n    }\n\n    public static finishGame (actualPlayer: Player): boolean {\n        if(actualPlayer.getCurrentPostion() >= 120)\n            return true;\n        return false;\n    }\n\n}", "import { IEffect } from \"../interfaces/IEffect\";\nimport { Box } from \"./Box\";\nimport { DiceSingleton } from \"./DiceSingleton\";\nimport { Player } from \"./Player\";\nimport { Events } from \"./Events\";\n\nexport class BoardGameSingleton {\n    private static instance: BoardGameSingleton;\n    private boxes: Map<number, Box>;\n    private buffBoxes: Set<number>;\n    private debuffBoxes: Set<number>;\n    private predictBoxes: Set<number>;\n    private itemBoxes: Set<number>;\n    private dice: DiceSingleton;\n    private players: Map<number, Player>;\n    private round: number;\n    private effect: IEffect | undefined;\n    private endGame: boolean;\n    private diceRollOrder: number;\n\n    private constructor(){\n        this.boxes = new Map<number, Box>();\n        this.buffBoxes = new Set<number>([7,20,35,53,68,78,84,100]);\n        this.debuffBoxes = new Set<number>([10,28,44,68,79,92,110,119]);\n        this.predictBoxes = new Set<number>([33,70,95]);\n        this.itemBoxes = new Set<number>([16,32,52,60,82,97]);\n        this.dice = DiceSingleton.getInstance();\n        this.players = new Map<number, Player>();\n        this.round = 1;\n        this.diceRollOrder = 1;\n        this.endGame = false;\n\n        this.addBoxes();\n    }\n\n    private addBoxes(): void{\n        let box: Box;\n        for(let i:number = 0; i<120; i++){\n            if (this.buffBoxes.has(i)){\n                box = new Box(\"buff\");\n                this.boxes.set(i, box);\n                continue;\n            }\n\n            if(this.debuffBoxes.has(i)){\n                box = new Box(\"debuff\");\n                this.boxes.set(i, box);\n                continue;\n            }\n\n            if(this.itemBoxes.has(i)){\n                box = new Box(\"item\");\n                this.boxes.set(i, box);\n                continue;\n            }\n\n            if(this.predictBoxes.has(i)){\n                box = new Box(\"predict\");\n                this.boxes.set(i, box);\n                continue;\n            }\n\n            box = new Box();\n            this.boxes.set(i,box);\n        }\n    }\n\n    public addPlayers(playersNumber: number): void{\n        if(playersNumber<2)\n            playersNumber = 2;\n        if(playersNumber>4)\n            playersNumber = 4;\n\n        for(let i:number = 1; i<=playersNumber; i++){\n            const newPlayer: Player = new Player(`player ${i}`, i);\n            this.players.set(i, newPlayer);\n        }\n    }\n\n    public currentPlayer(): Player {\n        return <Player>this.players.get(this.diceRollOrder);\n    }\n    \n    public playerPullDice (currentPlayer: Player): number {\n        const diceResult: number = currentPlayer.pullDice(this.dice);\n        return diceResult;\n    }\n\n    public updatePosition(currentPlayer: Player, diceResult: number): void{\n        currentPlayer.move(currentPlayer.getCurrentPostion()+diceResult);\n    }\n\n    public verifyLoseTurn(currentPlayer: Player): boolean {\n        return currentPlayer.getIsdebuffed();\n    }\n\n    public useItem(currentPlayer: Player, itemChosen: string, enemyPlayer: Player): boolean{\n\n        if(!currentPlayer.getAllItems().has(itemChosen)){\n            return false;\n        }\n\n        const wasUsed: boolean = Events.itemUsed(currentPlayer, enemyPlayer, itemChosen);\n        return wasUsed\n    }\n\n    public verifyEffect(currentPlayer: Player): IEffect | undefined {\n\n        this.effect = Events.applyEffect(currentPlayer, this.boxes);\n\n        if(this.effect != undefined){               \n            this.effect.activeEffect(currentPlayer);\n            return this.effect;\n        }\n        return undefined;\n    }\n\n    public nextRound(): void {\n        this.diceRollOrder += 1;\n\n        if(this.diceRollOrder > this.players.size)\n            this.diceRollOrder = 1;\n\n        this.round += 1;\n    }\n\n    public verifyEndGame(currentPlayer: Player): boolean{\n\n        if(this.endGame){\n            return true;\n        }\n\n        this.endGame = Events.finishGame(currentPlayer);\n\n        if(this.endGame){\n            return true;\n        }\n\n        return false;\n    }\n\n    public static getInstance(): BoardGameSingleton{\n        if(this.instance == null)\n            return this.instance = new BoardGameSingleton;\n        \n        return this.instance;\n    }\n\n    //GETTERS\n    public getBuffBoxes(): Set<number>{\n        return this.buffBoxes;\n    }\n\n    public getDebuffBoxes(): Set<number>{\n        return this.debuffBoxes;\n    }\n\n    public getItemBoxes(): Set<number>{\n        return this.itemBoxes;\n    } \n\n    public getPlayers(): Map<number, Player> {\n        return this.players;\n    }\n\n    public getPlayersName(): string {\n        let playersName = \"\";\n        this.players.forEach((value, key) => {\n            playersName+= `ID: ${key} | ${value.toString()}\\n`\n        });\n\n        return playersName;\n    }\n\n    public getPlayer(id: number): Player | undefined {\n        return this.players.get(id);\n    }\n\n    public getRound(): number {\n        return this.round;\n    }\n\n}", "import { BoardGameSingleton } from \"./BoardGameSingleton\";\nimport { Player } from \"./Player\";\n\nconst boardGame: BoardGameSingleton = BoardGameSingleton.getInstance();\n\nexport abstract class Draw {\n    \n    public static paintPlayerName(name: string): void{\n        const playerNameElement: Element = <Element> document.querySelector(\".current-player\");\n        playerNameElement.innerHTML = name;\n    }\n\n    public static paintItems(player: Player): void{\n        const itemsElement: Element = <Element> document.querySelector(\".items\");\n\n        itemsElement.innerHTML = \"\";\n\n        const itemsNameIterable: Iterable<string> = player.getAllItems().keys();\n\n        for(let itemName of itemsNameIterable){\n            const optionElement = document.createElement(\"option\");\n            optionElement.setAttribute(\"value\", itemName);\n            optionElement.innerHTML = itemName;\n\n            itemsElement.append(optionElement);\n        }\n    }\n\n    private static paintBox(id: number, effect?: string): HTMLElement{\n        const sectionElement = document.createElement(\"section\");\n        sectionElement.setAttribute(\"class\", \"box\");\n        sectionElement.setAttribute(\"id\", `box${id}`);\n\n        if(effect != undefined) {\n            if(effect === \"buff\"){\n                sectionElement.style.backgroundColor = \"rgb(150, 220, 100)\";\n                return sectionElement;\n            }\n\n            if(effect === \"debuff\"){\n                sectionElement.style.backgroundColor = \"rgb(220, 85, 75)\";\n                return sectionElement;\n            }\n                \n            if(effect === \"item\"){\n                sectionElement.style.backgroundColor = \"rgb(235, 220, 80)\";\n                return sectionElement\n            }\n        }\n            \n        return sectionElement;\n    }\n\n    public static paintBoard(): void{\n        const topBoxesContainer:Element = <Element>document.querySelector(\".top-boxes\");\n        const rightBoxesContainer:Element = <Element>document.querySelector(\".right-boxes\");\n        const bottomBoxesContainer:Element = <Element>document.querySelector(\".bottom-boxes\");\n        const leftBoxesContainer:Element = <Element>document.querySelector(\".left-boxes\");\n\n        const buffBoxes: Set<number> = boardGame.getBuffBoxes();\n        const debuffBoxes: Set<number> = boardGame.getDebuffBoxes();\n        const itemsBoxes: Set<number> = boardGame.getItemBoxes();\n\n        for(let i = 0; i<120; i++){\n\n            if(buffBoxes.has(i)){\n\n                if(i<40){\n                    topBoxesContainer.append(this.paintBox(i, \"buff\"));\n                    continue;\n                }\n                \n                if(i>=40 && i<60){\n                    rightBoxesContainer.append(this.paintBox(i, \"buff\"));\n                    continue;\n                }\n    \n                if(i>=60 && i<100){\n                    bottomBoxesContainer.append(this.paintBox(i, \"buff\"));\n                    continue;\n                }\n    \n                if(i>=100){\n                    leftBoxesContainer.append(this.paintBox(i, \"buff\"));\n                    continue;\n                }  \n                \n            }\n\n            if(debuffBoxes.has(i)){\n\n                if(i<40){\n                    topBoxesContainer.append(this.paintBox(i, \"debuff\"));\n                    continue;\n                }\n                \n                if(i>=40 && i<60){\n                    rightBoxesContainer.append(this.paintBox(i, \"debuff\"));\n                    continue;\n                } \n    \n                if(i>=60 && i<100){\n                    bottomBoxesContainer.append(this.paintBox(i, \"debuff\"));\n                    continue;\n                }\n    \n                if(i>=100){\n                    leftBoxesContainer.append(this.paintBox(i, \"debuff\"));\n                    continue;\n                }  \n                \n            }\n\n            if(itemsBoxes.has(i)){\n\n                if(i<40){\n                    topBoxesContainer.append(this.paintBox(i, \"item\"));\n                    continue;\n                }\n                    \n                if(i>=40 && i<60){\n                    rightBoxesContainer.append(this.paintBox(i, \"item\"));\n                    continue;\n                }\n                    \n                if(i>=60 && i<100){\n                    bottomBoxesContainer.append(this.paintBox(i, \"item\"));\n                    continue;\n                }\n                   \n                if(i>=100){\n                    leftBoxesContainer.append(this.paintBox(i, \"item\"));\n                    continue;\n                }  \n                \n            }\n\n            if(i<40){\n                topBoxesContainer.append(this.paintBox(i));\n                continue;\n            }\n                \n            \n            if(i>=40 && i<60){\n                rightBoxesContainer.append(this.paintBox(i));\n                continue;\n            }\n                \n\n            if(i>=60 && i<100){\n                bottomBoxesContainer.append(this.paintBox(i));\n                continue;\n            }\n               \n\n            if(i>=100){\n                leftBoxesContainer.append(this.paintBox(i));\n                continue;\n            } \n              \n        }\n    }\n\n    public static paintPlayers(players: Map<number, Player>): void{\n        const boardElement: Element = <Element> document.querySelector(\".board\");\n        const playersBoxElement: Element = <Element> document.querySelector(\".players-box\");\n        const startBox: Element = <Element> boardElement.querySelector(\"#box0\");\n\n        players.forEach((value, key) => {\n            const playerNameElement: Element = document.createElement(\"span\");\n            playerNameElement.innerHTML =  `${value.getName()}`;\n\n            const playerElementStatic: Element = document.createElement(\"div\");\n            playerElementStatic.setAttribute(\"class\", \"player\");\n            playerElementStatic.setAttribute(\"id\", `ps${key}`);\n            playerElementStatic.appendChild(playerNameElement);\n\n            const playerContainer: Element = document.createElement(\"section\");\n            playerContainer.setAttribute(\"class\", \"player-container\");\n            playerContainer.appendChild(playerElementStatic);\n            playerContainer.appendChild(playerNameElement);\n\n            playersBoxElement.appendChild(playerContainer);\n\n            const playerElement: Element = document.createElement(\"div\");\n            playerElement.setAttribute(\"class\", \"player\");\n            playerElement.setAttribute(\"id\", `p${key}`);\n            startBox.appendChild(playerElement);\n\n        });\n    }\n\n    public static repaintPlayer(player: Player, diceResult: number, beforeCurrentPostion: number = -1): void {\n        const boardElement: Element = <Element>document.querySelector(\".board\");\n        //Si se aplica un efecto que altera la posicion del jugador, esta variable guarda la pocision despues de que el efecto se haya aplicado.\n        const playerPosition = player.getCurrentPostion();\n        const playerId: string = player.getId();\n\n        const playerElementClone = document.createElement(\"div\");\n        playerElementClone.setAttribute(\"class\", \"player\");\n        playerElementClone.setAttribute(\"id\", playerId);\n\n        if(beforeCurrentPostion != -1){\n            const playerCurrentBox: Element = <Element>boardElement.querySelector(`#box${beforeCurrentPostion}`);\n            const playerElement: Element = <Element> playerCurrentBox.querySelector(`#${playerId}`);\n            const playerNewBox: Element = <Element>boardElement.querySelector(`#box${playerPosition}`);\n        \n            playerNewBox.appendChild(playerElementClone);\n            playerElement.remove();\n            return;\n        }\n\n        const playerCurrentBox: Element = <Element>boardElement.querySelector(`#box${playerPosition}`);\n        const playerElement: Element = <Element> playerCurrentBox.querySelector(`#${playerId}`);\n\n        if(playerPosition + diceResult >= 120){\n            const winnerBoxElement: Element = <Element>boardElement.querySelector(\".winner-box\");\n            winnerBoxElement.appendChild(playerElementClone);\n            const winnerNameElement: Element = <Element>boardElement.querySelector(\".winner-name\");\n            winnerNameElement.innerHTML = `El ganador es ${player.getName()}<br>El juego se reiniciara en 10 segundos`;\n            playerElement.remove();\n            return;\n        }\n\n        const playerNewBox: Element = <Element>boardElement.querySelector(`#box${playerPosition+diceResult}`);\n        \n        playerNewBox.appendChild(playerElementClone);\n        playerElement.remove();\n        return;\n    }   \n}", "import { AddHtmlElements } from \"./classes/AddHtmlElements\";\nimport { BoardGameSingleton } from \"./classes/BoardGameSingleton\";\nimport { Draw } from \"./classes/Draw\";\nimport { AdvanceStrategy } from \"./classes/effects/buff/AdvanceStrategy\";\nimport { ExtraRollStrategy } from \"./classes/effects/buff/ExtraRollStrategy\";\nimport { BackStrategy } from \"./classes/effects/debuff/BackStrategy\";\nimport { Player } from \"./classes/Player\";\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n    const buttonPullDice: Element = <Element>document.querySelector(\".rollDice\");\n    const formItemUsed: Element = <Element>document.querySelector(\".items-form\");\n    const boardGame: BoardGameSingleton = BoardGameSingleton.getInstance();\n\n    const playerAmount: string = prompt(\"ingrese la cantidad de jugadores: min. 2 y max. 4\") || \"2\";\n    const numberPlayerAmount: number =  parseInt(playerAmount);\n\n    if(numberPlayerAmount == undefined)\n        boardGame.addPlayers(2);\n\n    if(numberPlayerAmount)\n        boardGame.addPlayers(numberPlayerAmount);\n\n    let currentPlayer: Player = boardGame.currentPlayer();\n\n    Draw.paintBoard();\n    Draw.paintPlayers(boardGame.getPlayers());\n    Draw.paintPlayerName(currentPlayer.getName());\n    \n    const removeEventClick = () => {\n        \n        const diceResult: number = boardGame.playerPullDice(currentPlayer);\n        Draw.repaintPlayer(currentPlayer, diceResult);\n        boardGame.updatePosition(currentPlayer, diceResult);\n        let endGame: boolean = boardGame.verifyEndGame(currentPlayer);\n\n        //Esta variable la uso para guardar una referencia de la posicion del jugador antes de\n        //que se le aplique un efecto que altera su posicion.\n        const currentPositionBeforeEffect: number = currentPlayer.getCurrentPostion();\n\n        if(endGame){\n            buttonPullDice.removeEventListener(\"click\", removeEventClick);\n            AddHtmlElements.spanToMatchInfo(`El ganador es el jugador: ${currentPlayer.getName()}`);\n            setTimeout(()=>{\n                window.location.reload();\n            }, 10000);\n            return;\n        }\n\n        const effect = boardGame.verifyEffect(currentPlayer);\n\n        if(effect instanceof BackStrategy || effect instanceof AdvanceStrategy || effect instanceof ExtraRollStrategy){\n            Draw.repaintPlayer(currentPlayer, 0, currentPositionBeforeEffect);\n        }\n\n        boardGame.nextRound();\n\n        currentPlayer = boardGame.currentPlayer();\n\n        if(boardGame.verifyLoseTurn(currentPlayer)){\n            currentPlayer.updateDebuff(false);\n            boardGame.nextRound();\n            currentPlayer = boardGame.currentPlayer();\n        }\n\n        Draw.paintPlayerName(currentPlayer.getName());\n        Draw.paintItems(currentPlayer);\n    }\n\n    buttonPullDice.addEventListener(\"click\", removeEventClick);\n\n    formItemUsed.addEventListener(\"submit\", e => {\n        e.preventDefault();\n        const itemChosen = e.target[0].value;\n        const enemyChosen: string = <string>prompt(`Elige el ID de algun player contra el que usar el objeto:\\n${boardGame.getPlayersName()}` || \"-1\");\n        const enemyChosenId: number = parseInt(enemyChosen);\n        const enemyPlayer: Player | undefined = boardGame.getPlayer(enemyChosenId);\n\n        if(enemyPlayer){\n            const currentPositionEnemy: number = enemyPlayer.getCurrentPostion();\n\n            const wasUsed = boardGame.useItem(currentPlayer, itemChosen, enemyPlayer);\n\n            if(wasUsed){\n                const itemsElem: Element = <Element>formItemUsed.querySelector(\".items\");\n                itemsElem.innerHTML = \"\";\n            }\n\n            if(wasUsed && itemChosen == \"hook\")\n                Draw.repaintPlayer(enemyPlayer, 0, currentPositionEnemy);\n                \n        }\n\n        AddHtmlElements.spanToMatchInfo(`El enemigo seleccionado no existe`);\n\n    });\n\n})\n"],
  "mappings": "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",
  "names": ["playerCurrentBox", "playerElement", "playerNewBox", "boardGame"]
}
